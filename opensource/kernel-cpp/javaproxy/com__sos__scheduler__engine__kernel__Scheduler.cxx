// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__Scheduler.h"
#include "com__google__inject__Injector.h"
#include "com__sos__scheduler__engine__cplusplus__runtime__Sister.h"
#include "com__sos__scheduler__engine__kernel__async__CppCall.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__SpoolerC.h"
#include "com__sos__scheduler__engine__kernel__event__EventSubsystem.h"
#include "com__sos__scheduler__engine__main__SchedulerControllerBridge.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { 

struct Scheduler__class : ::zschimmer::javabridge::Class
{
    Scheduler__class(const string& class_name);
   ~Scheduler__class();

    ::zschimmer::javabridge::Static_method const _buildVersion____method;
    ::zschimmer::javabridge::Method const _cancelCall__Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method;
    ::zschimmer::javabridge::Static_method const _defaultTimezoneId____method;
    ::zschimmer::javabridge::Method const _enqueueCall__Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method;
    ::zschimmer::javabridge::Method const _getEventSubsystem____method;
    ::zschimmer::javabridge::Method const _initialize____method;
    ::zschimmer::javabridge::Method const _javaExecuteXml__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _log__Ljava_lang_String_2ILjava_lang_String_2__method;
    ::zschimmer::javabridge::Static_method const _newInjector__Lcom_sos_scheduler_engine_kernel_cppproxy_SpoolerC_2Lcom_sos_scheduler_engine_main_SchedulerControllerBridge_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _onActivate____method;
    ::zschimmer::javabridge::Method const _onActivated____method;
    ::zschimmer::javabridge::Method const _onClose____method;
    ::zschimmer::javabridge::Method const _onEnteringSleepState____method;
    ::zschimmer::javabridge::Method const _onLoad____method;
    ::zschimmer::javabridge::Method const _sendCommandAndReplyToStout__Ljava_lang_String_2_3B__method;
    ::zschimmer::javabridge::Method const _threadLock____method;
    ::zschimmer::javabridge::Method const _threadUnlock____method;
    ::zschimmer::javabridge::Static_method const _versionCommitHash____method;

    static const ::zschimmer::javabridge::class_factory< Scheduler__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Scheduler__class > Scheduler__class::class_factory ("com.sos.scheduler.engine.kernel.Scheduler");

Scheduler__class::Scheduler__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_buildVersion____method(this, "buildVersion", "()Ljava/lang/String;")
    ,_cancelCall__Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method(this, "cancelCall", "(Lcom/sos/scheduler/engine/kernel/async/CppCall;)V")
    ,_defaultTimezoneId____method(this, "defaultTimezoneId", "()Ljava/lang/String;")
    ,_enqueueCall__Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method(this, "enqueueCall", "(Lcom/sos/scheduler/engine/kernel/async/CppCall;)V")
    ,_getEventSubsystem____method(this, "getEventSubsystem", "()Lcom/sos/scheduler/engine/kernel/event/EventSubsystem;")
    ,_initialize____method(this, "initialize", "()V")
    ,_javaExecuteXml__Ljava_lang_String_2__method(this, "javaExecuteXml", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_log__Ljava_lang_String_2ILjava_lang_String_2__method(this, "log", "(Ljava/lang/String;ILjava/lang/String;)V")
    ,_newInjector__Lcom_sos_scheduler_engine_kernel_cppproxy_SpoolerC_2Lcom_sos_scheduler_engine_main_SchedulerControllerBridge_2Ljava_lang_String_2__method(this, "newInjector", "(Lcom/sos/scheduler/engine/kernel/cppproxy/SpoolerC;Lcom/sos/scheduler/engine/main/SchedulerControllerBridge;Ljava/lang/String;)Lcom/google/inject/Injector;")
    ,_onActivate____method(this, "onActivate", "()V")
    ,_onActivated____method(this, "onActivated", "()V")
    ,_onClose____method(this, "onClose", "()V")
    ,_onEnteringSleepState____method(this, "onEnteringSleepState", "()J")
    ,_onLoad____method(this, "onLoad", "()V")
    ,_sendCommandAndReplyToStout__Ljava_lang_String_2_3B__method(this, "sendCommandAndReplyToStout", "(Ljava/lang/String;[B)V")
    ,_threadLock____method(this, "threadLock", "()V")
    ,_threadUnlock____method(this, "threadUnlock", "()V")
    ,_versionCommitHash____method(this, "versionCommitHash", "()Ljava/lang/String;"){}

Scheduler__class::~Scheduler__class() {}




Scheduler::Scheduler(jobject jo) { if (jo) assign_(jo); }

Scheduler::Scheduler(const Scheduler& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Scheduler::Scheduler(Scheduler&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Scheduler::~Scheduler() { assign_(NULL); }




::javaproxy::java::lang::String Scheduler::buildVersion() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = Scheduler__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_buildVersion____method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

void Scheduler::cancelCall(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::async::CppCall >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Scheduler__class* cls = _class.get();
    cls->_cancelCall__Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Scheduler::defaultTimezoneId() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = Scheduler__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_defaultTimezoneId____method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

void Scheduler::enqueueCall(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::async::CppCall >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Scheduler__class* cls = _class.get();
    cls->_enqueueCall__Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::com::sos::scheduler::engine::kernel::event::EventSubsystem Scheduler::getEventSubsystem() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    ::javaproxy::com::sos::scheduler::engine::kernel::event::EventSubsystem result;
    result.steal_local_ref(cls->_getEventSubsystem____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void Scheduler::initialize() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_initialize____method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Scheduler::javaExecuteXml(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Scheduler__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_javaExecuteXml__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void Scheduler::log(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, jint p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].l = p2.get_jobject();
    Scheduler__class* cls = _class.get();
    cls->_log__Ljava_lang_String_2ILjava_lang_String_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::com::google::inject::Injector Scheduler::newInjector(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::SpoolerC >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::main::SchedulerControllerBridge >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2) {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    Scheduler__class* cls = Scheduler__class::class_factory.clas();
    ::javaproxy::com::google::inject::Injector result;
    result.steal_local_ref(cls->_newInjector__Lcom_sos_scheduler_engine_kernel_cppproxy_SpoolerC_2Lcom_sos_scheduler_engine_main_SchedulerControllerBridge_2Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

void Scheduler::onActivate() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onActivate____method.call(get_jobject(), parameter_list);
}

void Scheduler::onActivated() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onActivated____method.call(get_jobject(), parameter_list);
}

void Scheduler::onClose() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onClose____method.call(get_jobject(), parameter_list);
}

jlong Scheduler::onEnteringSleepState() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    return cls->_onEnteringSleepState____method.long_call(get_jobject(), parameter_list);
}

void Scheduler::onLoad() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onLoad____method.call(get_jobject(), parameter_list);
}

void Scheduler::sendCommandAndReplyToStout(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::Local_java_byte_array& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jbyteArray();
    Scheduler__class* cls = _class.get();
    cls->_sendCommandAndReplyToStout__Ljava_lang_String_2_3B__method.call(get_jobject(), parameter_list);
}

void Scheduler::threadLock() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_threadLock____method.call(get_jobject(), parameter_list);
}

void Scheduler::threadUnlock() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_threadUnlock____method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Scheduler::versionCommitHash() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = Scheduler__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_versionCommitHash____method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Scheduler::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Scheduler::java_class_() { return Scheduler__class::class_factory.clas(); }


void Scheduler::Lazy_class::initialize() const {
    _value = Scheduler__class::class_factory.clas();
}


}}}}}}
